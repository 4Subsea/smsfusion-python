[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "smsfusion"
authors = [
  { name="4Subsea", email="python@4subsea.com" },
]
description = "Sensor fusion algorithms and utilities for SMS Motion"
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dynamic = ["version"]
dependencies = [
  "numpy",
]


[project.urls]
"Homepage" = "https://github.com/4Subsea/smsfusion-python"
"Bug Tracker" = "https://github.com/4Subsea/smsfusion-python/issues"

[tool.hatch.version]
path = "src/smsfusion/__about__.py"

[tool.hatch.envs.test]
dependencies = [
  "black",
  "coverage[toml]",
  "isort",
  "pytest",
  "pytest-cov"
]

[tool.hatch.envs.test.scripts]
run = [
  "black --check .",
  "isort --check . --profile black",
  "pytest --cov-config=pyproject.toml --cov --cov-report html"
  ]

[tool.hatch.envs.docs]
dependencies = [
  "sphinx"
]
[tool.hatch.envs.docs.scripts]
build = "sphinx-build -b html ./docs ./build/html"

[tool.pytest.ini_options]
testpaths = [
    "tests"
]

[tool.coverage.run]
branch = true
source = ["src/smsfusion"]

[tool.coverage.report]
ignore_errors = false
show_missing = true
omit = ["src/smsfusion/__about__.py"]
exclude_lines = [
  # Have to re-enable the standard pragma
  "pragma: no cover",
  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",
  "AbstractMethodError",
  # Don't complain if non-runnable code isn't run:
  "if 0:",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.coverage.html]
directory = "coverage_html_report"
